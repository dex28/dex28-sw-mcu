
demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000f2  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000186  2**0
                  ALLOC
  3 .noinit       00000000  00800063  00800063  00000186  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000186  2**0
                  CONTENTS
  5 .stab         000003f0  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000005d1  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16
   2:	22 c0       	rjmp	.+68     	; 0x48
   4:	21 c0       	rjmp	.+66     	; 0x48
   6:	20 c0       	rjmp	.+64     	; 0x48
   8:	1f c0       	rjmp	.+62     	; 0x48
   a:	1f c0       	rjmp	.+62     	; 0x4a
   c:	1d c0       	rjmp	.+58     	; 0x48
   e:	1c c0       	rjmp	.+56     	; 0x48
  10:	1b c0       	rjmp	.+54     	; 0x48
  12:	1a c0       	rjmp	.+52     	; 0x48
  14:	19 c0       	rjmp	.+50     	; 0x48

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61

0000001e <__do_copy_data>:
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	a0 e6       	ldi	r26, 0x60	; 96
  22:	b0 e0       	ldi	r27, 0x00	; 0
  24:	e2 ef       	ldi	r30, 0xF2	; 242
  26:	f0 e0       	ldi	r31, 0x00	; 0
  28:	03 c0       	rjmp	.+6      	; 0x30

0000002a <.do_copy_data_loop>:
  2a:	c8 95       	lpm
  2c:	31 96       	adiw	r30, 0x01	; 1
  2e:	0d 92       	st	X+, r0

00000030 <.do_copy_data_start>:
  30:	a0 36       	cpi	r26, 0x60	; 96
  32:	b1 07       	cpc	r27, r17
  34:	d1 f7       	brne	.-12     	; 0x2a

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a3 36       	cpi	r26, 0x63	; 99
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e
  46:	4f c0       	rjmp	.+158    	; 0xe6

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0

0000004a <__vector_5>:
volatile uint16_t pwm; /* Note [1] */
volatile uint8_t direction;

SIGNAL (SIG_OVERFLOW1) /* Note [2] */
{
  4a:	1f 92       	push	r1
  4c:	0f 92       	push	r0
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	0f 92       	push	r0
  52:	11 24       	eor	r1, r1
  54:	2f 93       	push	r18
  56:	8f 93       	push	r24
  58:	9f 93       	push	r25
    switch (direction) /* Note [3] */
  5a:	80 91 60 00 	lds	r24, 0x0060
  5e:	99 27       	eor	r25, r25
  60:	00 97       	sbiw	r24, 0x00	; 0
  62:	a1 f0       	breq	.+40     	; 0x8c
  64:	01 97       	sbiw	r24, 0x01	; 1
  66:	29 f5       	brne	.+74     	; 0xb2
    {
        case UP:
            if (++pwm == 1023)
                direction = DOWN;
            break;

        case DOWN:
            if (--pwm == 0)
  68:	80 91 61 00 	lds	r24, 0x0061
  6c:	90 91 62 00 	lds	r25, 0x0062
  70:	01 97       	sbiw	r24, 0x01	; 1
  72:	90 93 62 00 	sts	0x0062, r25
  76:	80 93 61 00 	sts	0x0061, r24
  7a:	80 91 61 00 	lds	r24, 0x0061
  7e:	90 91 62 00 	lds	r25, 0x0062
  82:	89 2b       	or	r24, r25
  84:	b1 f4       	brne	.+44     	; 0xb2
                direction = UP;
  86:	10 92 60 00 	sts	0x0060, r1
  8a:	13 c0       	rjmp	.+38     	; 0xb2
  8c:	80 91 61 00 	lds	r24, 0x0061
  90:	90 91 62 00 	lds	r25, 0x0062
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	90 93 62 00 	sts	0x0062, r25
  9a:	80 93 61 00 	sts	0x0061, r24
  9e:	80 91 61 00 	lds	r24, 0x0061
  a2:	90 91 62 00 	lds	r25, 0x0062
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	93 40       	sbci	r25, 0x03	; 3
  aa:	19 f4       	brne	.+6      	; 0xb2
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	80 93 60 00 	sts	0x0060, r24
            break;
    }

    OCR = pwm; /* Note [4] */
  b2:	80 91 61 00 	lds	r24, 0x0061
  b6:	90 91 62 00 	lds	r25, 0x0062
  ba:	9b bd       	out	0x2b, r25	; 43
  bc:	8a bd       	out	0x2a, r24	; 42
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	2f 91       	pop	r18
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <ioinit>:

void
ioinit (void) /* Note [5] */
{
    /* tmr1 is 10-bit PWM */
    TCCR1A = _BV (PWM10) | _BV (PWM11) | _BV (XCOM11);
  ce:	83 e8       	ldi	r24, 0x83	; 131
  d0:	8f bd       	out	0x2f, r24	; 47

    /* tmr1 running on full MCU clock */
    TCCR1B = _BV (CS10);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	8e bd       	out	0x2e, r24	; 46

    /* set PWM value to 0 */
    OCR = 0;
  d6:	1b bc       	out	0x2b, r1	; 43
  d8:	1a bc       	out	0x2a, r1	; 42

    /* enable OC1 and PB2 as output */
    DDROC = _BV (OC1);
  da:	88 e0       	ldi	r24, 0x08	; 8
  dc:	87 bb       	out	0x17, r24	; 23

extern inline void timer_enable_int (unsigned char ints)
{
#ifdef TIMSK
  outb(TIMSK, ints);
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	89 bf       	out	0x39, r24	; 57

    timer_enable_int (_BV (TOIE1));

    /* enable interrupts */
    sei ();
  e2:	78 94       	sei
}
  e4:	08 95       	ret

000000e6 <main>:

int
main (void)
{
  e6:	cf ed       	ldi	r28, 0xDF	; 223
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	cd bf       	out	0x3d, r28	; 61
    ioinit ();
  ee:	ef df       	rcall	.-34     	; 0xce

    /* loop forever, the interrupts are doing the rest */

    for (;;) /* Note [6] */
  f0:	ff cf       	rjmp	.-2      	; 0xf0
